"""create_tables

Revision ID: 00001_3d410b661c83
Revises:
Create Date: 2025-09-08 22:57:30.053000

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from config.core import absolute_path


# revision identifiers, used by Alembic.
revision: str = '00001_3d410b661c83'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    op.execute(open(absolute_path("src", "backend", "infra", "database", "alchemy", "sql", "functions", "uuid_generate_v7.sql"), mode="r").read())
    op.execute("CREATE EXTENSION IF NOT EXISTS pgcrypto;")
    op.execute('CREATE EXTENSION IF NOT EXISTS "uuid-ossp";')
    op.execute('CREATE EXTENSION IF NOT EXISTS pg_cron;')
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('permission',
    sa.Column('resource', sa.String(), nullable=False),
    sa.Column('action', sa.Enum('READ', 'CREATE', 'DELETE', 'UPDATE', name='action', native_enum=False), nullable=False),
    sa.Column('operation', sa.String(), nullable=False),
    sa.Column('description', sa.String(), nullable=True),
    sa.Column('key', sa.Text(), sa.Computed("lower(resource::text) || ':' || lower(action::text) || ':' || lower(operation::text)", ), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_permission'))
    )
    op.create_index(op.f('ix_permission_key'), 'permission', ['key'], unique=True)
    op.create_table('role',
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('level', sa.Integer(), nullable=False),
    sa.Column('is_superuser', sa.Boolean(), server_default=sa.text('false'), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_role'))
    )
    op.create_index(op.f('ix_role_is_superuser'), 'role', ['is_superuser'], unique=True, postgresql_where=sa.text('is_superuser = true'))
    op.create_index(op.f('ix_role_name'), 'role', [sa.literal_column('lower(name)')], unique=True)
    op.create_table('user',
    sa.Column('email', sa.String(), nullable=True),
    sa.Column('password', sa.String(), nullable=True),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_user'))
    )
    op.create_index(op.f('ix_user_email'), 'user', [sa.literal_column('lower(email)')], unique=True)
    op.create_table('permission_field',
    sa.Column('permission_id', sa.UUID(), nullable=False),
    sa.Column('src', sa.Enum('QUERY', 'JSON', name='source', native_enum=False), nullable=False),
    sa.Column('name', sa.String(), nullable=False),
    sa.Column('id', sa.UUID(), server_default=sa.text('uuid_generate_v7()'), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], name=op.f('fk_permission_field_permission_id_permission'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name=op.f('pk_permission_field'))
    )
    op.create_index(op.f('ix_permission_field_permission_id'), 'permission_field', ['permission_id', sa.literal_column('lower(src)'), sa.literal_column('lower(name)')], unique=True)
    op.create_table('role_permission',
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('permission_id', sa.UUID(), nullable=False),
    sa.Column('scope', sa.Enum('OWN', 'ANY', name='scope', native_enum=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], name=op.f('fk_role_permission_permission_id_permission'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name=op.f('fk_role_permission_role_id_role'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'permission_id', name=op.f('pk_role_permission'))
    )
    op.create_index(op.f('ix_role_permission_permission_id'), 'role_permission', ['permission_id'], unique=False)
    op.create_table('user_role',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name=op.f('fk_user_role_role_id_role'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['user.id'], name=op.f('fk_user_role_user_id_user'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id', name=op.f('pk_user_role'))
    )
    op.create_index(op.f('ix_user_role_role_id'), 'user_role', ['role_id'], unique=False)
    op.create_table('role_permission_field',
    sa.Column('role_id', sa.UUID(), nullable=False),
    sa.Column('permission_id', sa.UUID(), nullable=False),
    sa.Column('field_id', sa.UUID(), nullable=False),
    sa.Column('effect', sa.Enum('ALLOW', 'DENY', name='effect', native_enum=False), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=False),
    sa.ForeignKeyConstraint(['field_id'], ['permission_field.id'], name=op.f('fk_role_permission_field_field_id_permission_field'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['permission_id'], ['permission.id'], name=op.f('fk_role_permission_field_permission_id_permission'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['role.id'], name=op.f('fk_role_permission_field_role_id_role'), onupdate='CASCADE', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'permission_id', 'field_id', name=op.f('pk_role_permission_field'))
    )
    op.create_index(op.f('ix_role_permission_field_field_id'), 'role_permission_field', ['field_id'], unique=False)
    op.create_index(op.f('ix_role_permission_field_permission_id'), 'role_permission_field', ['permission_id'], unique=False)
    # ### end Alembic commands ###
    for stmt in open(absolute_path("src", "backend", "infra", "database", "alchemy", "sql", "mv", "user_permissions.sql"), mode="r").read().split("-- next --"):
        op.execute(stmt.strip())
    for stmt in open(absolute_path("src", "backend", "infra", "database", "alchemy", "sql", "triggers", "refresh_user_permissions.sql"), mode="r").read().split("-- next --"):
        op.execute(stmt.strip())

def downgrade() -> None:
    op.execute("""
    DO $$
    DECLARE v_jobid int;
    BEGIN
        IF EXISTS (SELECT 1 FROM pg_namespace WHERE nspname = 'cron') THEN
            SELECT jobid
            INTO v_jobid
            FROM cron.job
            WHERE jobname = 'mv_user_permissions_refresh_job'
            AND database = current_database()
            ORDER BY jobid DESC
            LIMIT 1;
            IF v_jobid IS NOT NULL THEN
                PERFORM cron.unschedule(v_jobid);
            END IF;
        END IF;
    END;
    $$;
    """)
    op.execute("DROP INDEX IF EXISTS mv_user_permissions_uid_key;")
    op.execute("DROP INDEX IF EXISTS mv_user_permissions_user_id;")
    op.execute("DROP MATERIALIZED VIEW IF EXISTS mv_user_permissions CASCADE;")
    op.execute('DROP TRIGGER IF EXISTS trg_mv_user_permissions_dirty_user_role ON user_role;')
    op.execute('DROP TRIGGER IF EXISTS trg_mv_user_permissions_dirty_role ON "role";')
    op.execute('DROP TRIGGER IF EXISTS trg_mv_user_permissions_dirty_permission ON permission;')
    op.execute('DROP TRIGGER IF EXISTS trg_mv_user_permissions_dirty_role_permission ON role_permission;')
    op.execute('DROP TRIGGER IF EXISTS trg_mv_user_permissions_dirty_role_permission_field ON role_permission_field;')
    op.execute('DROP TRIGGER IF EXISTS trg_mv_user_permissions_dirty_field ON permission_field;')
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index(op.f('ix_role_permission_field_permission_id'), table_name='role_permission_field')
    op.drop_index(op.f('ix_role_permission_field_field_id'), table_name='role_permission_field')
    op.drop_table('role_permission_field')
    op.drop_index(op.f('ix_user_role_role_id'), table_name='user_role')
    op.drop_table('user_role')
    op.drop_index(op.f('ix_role_permission_permission_id'), table_name='role_permission')
    op.drop_table('role_permission')
    op.drop_index(op.f('ix_permission_field_permission_id'), table_name='permission_field')
    op.drop_table('permission_field')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    op.drop_index(op.f('ix_role_name'), table_name='role')
    op.drop_index(op.f('ix_role_is_superuser'), table_name='role', postgresql_where=sa.text('is_superuser = true'))
    op.drop_table('role')
    op.drop_index(op.f('ix_permission_key'), table_name='permission')
    op.drop_table('permission')
    # ### end Alembic commands ###
    op.execute("DROP EXTENSION IF EXISTS pgcrypto;")
    op.execute('DROP EXTENSION IF EXISTS "uuid-ossp";')
    op.execute("DROP EXTENSION IF EXISTS pg_cron;")
    op.execute("DROP FUNCTION IF EXISTS uuid_generate_v7;")
